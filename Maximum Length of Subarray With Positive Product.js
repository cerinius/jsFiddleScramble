/**
 * @param {number[]} nums
 * @return {number}
 
 Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.
Example 1:

Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.
Example 2:

Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.
Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.
Example 3:

Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].


test case = [7670,1738,701,-4100,3485,1420,-1286,4221,-2367,1566,6980,-5752,-5471,-944,3460,5735,680,0,-761,-7683,-3832,1525,0,2233,0,838,-637,-4835,-7926,-2164,-5946,-4424,-6692,-7598,0,729,2530,-7714,-2246,5328,3523,2411,-1265,6718,1770,3382,3389,6397,-361,5818,2248,218,5900,1042,-7018,4620,-5337,2213,-5486,4038,-842,0,-2540,-6204,-3297,6371,137,0,0,4879,-1644,7135,-996,-7164,-2385,329,5656,1595,-5835,7334,-7621,-2541,0,-4353,-5696,5992,-290,0,2453,-4738,6259,-1086,7324,3572,7020,2117,-1506,0,1636,4702,-3817,5688,5627,-1574,-3016,3669,-5053,-5860,4770,6401,0,644,-2616,-4619,3843,0,-3212,855,-6357,-3983,-4507,-5449,7027,-5773,5804,6532,-843,-2915,-2541,-780,0,-2416,0,-3194,-7594,5628,7645,-1751,-1403,4562,-4075,1614,5402,-5697,3439,1110,2682,-3915,-7205,7361,5785,7104,7444,-7069,-4185,6834,-4865,-702,-1185,-2851,4807,-1064,7324,-5523,47,2692,0,3555,4331,-37,1485,0,0,1162,6199,1410,4612,4734,5814,2330,-4616,7603,-2719,689,3831,1614,1610,919,7103,6560,-7101,7928,764,281,1616,-213,1121,0,0,-88,4635,6362,6213,-1593,-2528,0,5063,2145,-5837,-6584,6094,-5630,-6008,-1242,-559,3764,0,-6995,2285,4067,-4660,-7678,5000,-4899,-7693,6322,0,404,1891,4777,-6598,-7641,0,3702,-5736,0,-7378,-4093,5975,-6394,1047,-7171,-3618,-6010,1995,5252,-4132,-4558,-2917,-7589,1272,0,5159,-1478,161,-5796,-3819,-6206,-4976,0,0,-5931,0,4053,6859,7295,-3229,-727,-1368,-1465,-2787,763,485,-1542,4265,7343,-3576,0,-6579,-1579,-3652,5335,2628,6315,0,0,4577,-91,-5041,7771,-5554,0,5818,-5851,-5994,-2495,-2319,482,0,-1447,-7093,3760,-5701,7281,2183,-4940,-5554,5904,4041,-966,6767,3107,7188,-7561,-3574,1761,0,5889,0,-437,-5803,-261,4207,-1468,824,6420,-3015,6257,0,-953,1542,-7771,0,1477,-4127,0,7058,-25,6128,770,-1051,-2100,6816,-4222,2177,-6866,7643,404,-4222,0,2555,349,0,-5071,1253,-7880,2884,-1416,-6727,2689,1003,3693,7809,4774,-2841,6851,-2533,7489,-2432,-6887,6109,-138,6871,-1763,-1038,-6232,2393,0,1480,771,1919,3108,-2069,4339,4310,4866,6614,7829,-6114,3485,6665,-341,-5171,-1771,-2782,4228,5446,-4043,-1012,6924,-1450,5940,854,-3722,-4859,0,6422,-1538,2050,-7157,985,2568,-4873,4307,7359,-2435,-2783,-7820,1760,-5279,0,-3175,-7783,0,0,-797,5884,0,-3954,-6510,-2614,7045,0,0,2884,-2945,2363,5246,-5511,-2931,-7051,-6938,0,6717,2362,582,5535,-6415,6357,6897,-4366,3207,-4983,1584,-6859,-7230,3998,1325,6999,-1407,4725,-941,-6508,0,-5474,650,2244,-7520,-2439,-1278,-5720,2584,5020,-1690,-250,5116,-6010,6715,-6955,-6302,2427,5479,7149,-4842,-2530,-1186,90,0,3120,2720,6915,-5949,6342,-2103,7921,-4432,2607,1399,181,-584,1886,2826,6823,-681,3928,-6568,-3418,7848,-372,5091,4984,0,2089,-5096,-6317,4096,3031,800,2365,1187,-322,-5022,1970,7503,2224,-4608,-2787,-4525,-825,4330,-1993,7018,1242,950,-650,743,4606,-2595,-7256,-2777,6825,-7070,2963,0,-7752,694,0,7748,-4495,0,-5338,6230,-31,-5072,-3009,-6654,1807,0,-4657,-3108,3519,3769,1798,535,7133,-2342,-481,-7120,940,-4249,-4024,-2329,-1092,4157,-1788,0,-4099,-5013,5894,-1737,0,3651,-4914,-7535,9,-256,2127,-6397,0,0,0,-1031,-521,-1800,-2736,1089,0,5626,-6560,6904,7147,-6875,0,-3520,-5788,2743,-7820,6623,-2071,-3345,1301,4676,5176,-3848,-2839,173,-903,-923,-3828,697,0,3030,-1331,670,-4414,5098,4725,6207,5703,-3921,7485,-6773,-6211,2320,-3692,2553,4550,-3592,-1199,-5642,-7728,-4683,-4369,-137,3937,4324,-3067,5982,-6338,-6284,7261,3705,-5045,-358,1010,-4068,-2632,7195,-890,2972,-7645,-4937,5706,4232,0,88,2931,-5580,-4100,-6070,-3260,-1840,0,-2702,-1183,-4798,-974,2042,-3805,0,0,-4467,3437,-3101,-2146,-3841,3723,0,-1107,2594,1478,0,6540,0,-3487,-1647,-5129,0,4151,-2495,4178,2121,4847,-7910,-400,-7315,-345,-7722,-7113,6357,-5714,-5029,-2533,-2580,1357,-7726,2388,7452,5759,2808,6655,-5690,764,5792,-4265,-3733,-5584,3977,-5660,0,-6926,-7475,0,-2271,-116,-5857,3378,-6258,5876,4843,-4192,2941,3521,6298,0,-221,4768,-3848,3650,-104,-1933,0,-5717,1246,0,5031,258,-7800,-796,-4645,-4413,4667,4100,1027,-1598,0,-2520,4208,-3315,-4407,-5166,4384,-1446,-4557,-6453,-6519,-957,-1477,-4979,-7376,-1910,1000,-6325,-2302,3818,-3740,-3205,-5056,-4362,-7315,1388,-1321,573]
 */
var getMaxLen = function(nums) {
  let longestArray;
  let longestArraylength = 0;
  let shortedSum = 1
  for (let i = 0; i < nums.length; i++) {
    let shortedArray = [];
    console.log(longestArraylength, nums[i])
    if (nums[i] != 0) {
      for (let j = i; j < nums.length; j++) {
        if (nums[j] != 0) {
          shortedArray.push(nums[j])
          shortedSum = shortedSum * nums[j]
          if (shortedArray.length > longestArraylength && shortedSum > 0) {
            longestArraylength = shortedArray.length;
            longestArray = [...shortedArray]
          }
        } else if (nums[j] == 0) {
          if (shortedArray.length > longestArraylength && shortedSum > 0) {
            longestArraylength = shortedArray;
            longestArray = shortedArray
          }
          shortedArray = [];
          shortedSum = 1;
        }
      }
      if (shortedArray.length > longestArraylength && shortedSum > 0) {
        longestArraylength = shortedArray;
        longestArray = shortedArray;
      }
      shortedArray = [];
      shortedSum = 1;
    }

  }
  console.log("longestArray", longestArraylength, longestArray);
  return longestArraylength
};

getMaxLen([0, 1, -2, -3, -4])
